--import 'VariableReferenceResolution.eol';

-- Add file + location information possibly in the post section
-- DONE : Implement module inheritance (rules with the same name overwrite inherited rules)

pre {
	var profiler : new Native('org.epsilon.eol.tools.builtin.ProfilerTool');
	var operatorLiterals : new Native('java.util.HashMap');
	profiler.start('pre');
	operatorLiterals.put('+', AS!Operator#Plus);
	operatorLiterals.put('-', AS!Operator#Minus);
	operatorLiterals.put('/', AS!Operator#Div);
	operatorLiterals.put('*', AS!Operator#Star);
	operatorLiterals.put('and', AS!Operator#And);
	operatorLiterals.put('or', AS!Operator#Or);
	operatorLiterals.put('xor', AS!Operator#Xor);
	operatorLiterals.put('implies', AS!Operator#Implies);
	operatorLiterals.put('>', AS!Operator#GreaterThan);
	operatorLiterals.put('=', AS!Operator#EqualTo);
	operatorLiterals.put('<', AS!Operator#LessThan);
	operatorLiterals.put('>=', AS!Operator#GreaterEqualThan);
	operatorLiterals.put('<=', AS!Operator#LessEqualThan);
	operatorLiterals.put('not', AS!Operator#NotEqualTo);
	profiler.stop();
	profiler.start('Engine');
}

post {
	
	--for (vr in AS!VariableReferenceExpression.allInstances.clone()) {
	--	if (not vr.eContainer().isDefined()){
	--		delete vr;
	--	}
	--}
	
	profiler.stop();
	
}

rule TEST
	merge a : A
	with b : B
	into C : C {
	
	guard : true
}

rule EolProgram2EolModule
	transform s : CS!AST
	to t : AS!EolModule {
	
	guard : s.type = 'EOLPROGRAM'

	t.body ::= s.children.selectOne(c|c.type = 'BLOCK');
	t.operationDeclarations ::= s.children.select(c|c.type = 'HELPERMETHOD');
}

rule ModelDeclaration2ModelDeclaration
	transform s : CS!AST
	to t : AS!ModelDeclaration {
	
	guard : s.type = 'MODEL'
	
	t.name := s.children.at(0).text;
	t.metamodel := s.children.at(1).text;
}

rule Helper2InlineOperationDeclaration
	transform s : CS!AST
	to t : AS!InlineOperationDeclaration {
	
	guard : s.type = 'HELPERMETHOD'
	
	t.context := s.children.at(0).getType();
	t.name := s.children.at(1).text;
	t.body ::= s.children.selectOne(c|c.type = 'BLOCK');
	
	var typeInitAsts := s.children.select(c|c.type = 'TYPEINIT');
	if (typeInitAsts.size() = 2) {
		t.type := typeInitAsts.at(1).getType();
	}
	
	var paramListAst := s.children.selectOne(c|c.type = 'PARAMLIST');
	if (paramListAst.isDefined()) {
		t.parameters ::= paramListAst.children;
	}
	
}

rule Formal2ParameterDeclaration
	transform s : CS!AST
	to t : AS!ParameterDeclaration {
	
	guard : s.type = 'FORMAL'
	
	t.name := s.children.at(0).text;
	t.type := s.children.at(1).getType();
}

rule For2For
	transform s : CS!AST
	to t : AS!ForStatement {
	
	guard : s.type = 'FOR'
	
	var vr : new AS!VariableDeclaration;
	vr.name := s.children.at(0).text;
	t.iterator := vr;
	t.iterated ::= s.children.at(1);
	t.body ::= s.children.at(2);
}

rule While2WhileStatement
	transform s : CS!AST
	to t : AS!WhileStatement {
	
	guard : s.type = 'WHILE'
	
	t.condition ::= s.children.at(0);
	t.body ::= s.children.at(1);
}

rule If2IfStatement
	transform s : CS!AST
	to t : AS!IfStatement {
	
	guard : s.type = 'IF'
	
	t.condition ::= s.children.at(0);
	t.body ::= s.children.at(1);
	if (s.children.size() > 2) {
		t."else" ::= s.children.at(2);
	}
}

rule Assignment2AssignStatement
	transform s : CS!AST
	to t : AS!AssignStatement {
	
	guard : s.type = 'ASSIGNMENT' and s.children.at(0).type <> 'VAR'
	
	t.source ::= s.children.at(0);
	t.target ::= s.children.at(1);
	
}

rule Var2VariableDeclarationStatement
	transform s : CS!AST
	to t : AS!VariableDeclarationStatement {
	
	guard : (s.type = 'VAR' and s.parent.type <> 'ASSIGNMENT') or 
		(s.type = 'ASSIGNMENT' and s.children.at(0).type = 'VAR')
	
	var ast;
	
	if (s.type <> 'VAR') {
		ast := s.children.at(0);
	}
	else {
		ast := s;
	}
	
	t.createsNew := (ast.text = 'new');
	
	var vd : new AS!VariableDeclaration;
	vd.name := ast.children.at(0).text;
	var type;
	if (ast.children.size = 1) {
		type := 'Any'.getPrimitiveType();
	}
	else {
		type := ast.children.at(1).getType();
	}
	vd.type := type;
	t.variable := vd;
	
	if (s.type = 'ASSIGNMENT') {
		t.initialValue ::= ast.parent.children.at(1);
	}
	
}

rule Return2ReturnStatement
	transform s : CS!AST
	to t : AS!ReturnStatement {
	
	guard : s.type = 'RETURN'
	
	if (s.children.size() = 1) {
		t.returned ::= s.children.at(0);
	}
}

rule Throw2ThrowStatement
	transform s : CS!AST
	to t : AS!ThrowStatement {
	
	guard : s.type = 'THROW'
	
	if (s.children.size() = 1) {
		t.thrown ::= s.children.at(0);
	}
}

rule Break2BreakStatement
	transform s : CS!AST
	to t : AS!BreakStatement {
	
	guard : s.type = 'BREAK'
	
}

rule Continue2ContinueStatement
	transform s : CS!AST
	to t : AS!ContinueStatement {
	
	guard : s.type = 'CONTINUE'
	
}

rule Point2PropertyCallExpression
	transform s : CS!AST
	to t : AS!PropertyCallExpression {
	
	guard : s.isPropertyCall()
	
	t.source ::= s.children.at(0);
	t.property := s.children.at(1).text;
}

rule Point2SimpleOperationCallExpression
	transform s : CS!AST
	to t : AS!SimpleOperationCallExpression {
	
	guard : s.isSimpleOperationCall()
	
	t.source ::= s.children.at(0);
	t.operationName := s.children.at(1).text;
	
	for (sp in s.children.at(1).children.at(0).children) {
		t.parameterValues.add(sp.equivalent());
	}
	
}

rule Point2DeclarativeOperationCallExpression
	transform s : CS!AST
	to t : AS!DeclarativeOperationCallExpression {
	
	guard : s.isDeclarativeOperationCall()
	
	t.source ::= s.children.at(0);
	t.operationName := s.children.at(1).text;
	
	var declarator := s.children.at(1).children.at(0).children.at(0);
	t.declaredVariables ::= declarator.children;
	
	t.expression ::= s.children.at(1).children.at(0).children.at(1);
}

-- TODO : Make operations on null objects not throw exceptions
rule Declaration2VariableDeclaration
	transform s : CS!AST
	to t : AS!VariableDeclaration {
	
	guard : s.type = 'DECLARATION' and s.text = 'Declaration'
	
	t.name := s.children.at(0).text;
	if (s.children.at(1).isDefined()) {
		t.type := s.children.at(1).getType();
	}
	else {
		t.type := 'Any'.getPrimitiveType();
	}
}

rule Block2StatementBlock
	transform s : CS!AST
	to t : AS!StatementBlock {
	
	guard : s.type = 'BLOCK'
	
	for (sc in s.children) {
		var tc := sc.equivalent();
		if (tc.isKindOf(AS!Statement)) {
			t.statements.add(tc);
		}
		else {
			var es : new AS!ExpressionStatement;
			es.expression := tc;
			t.statements.add(es);
		}
	}
}

-- TODO : Check what happens with rule inheritance and guards
rule Operator2UnaryOperatorExpression
	transform s : CS!AST
	to t : AS!UnaryOperatorExpression {
	
	guard : s.type = 'OPERATOR' and 
		s.children.size() = 1
	
	t.operator := operatorLiterals.get(s.text);
	t.expression ::= s.children.at(0);
	
}

rule Operator2BinaryOperatorExpression
	transform s : CS!AST
	to t : AS!BinaryOperatorExpression {
	
	guard : s.type = 'OPERATOR' and 
		s.children.size() = 2
	
	t.operator := operatorLiterals.get(s.text);
	t.leftExpression ::= s.children.at(0);
	t.rightExpression ::= s.children.at(1);
	
}

rule String2LiteralExpression
	transform s : CS!AST
	to t : AS!LiteralExpression {
	
	guard : s.type = 'STRING'
	
	t.value := s.text;
	t.type := 'String'.getPrimitiveType();
}

rule Boolean2LiteralExpression
	transform s : CS!AST
	to t : AS!LiteralExpression {
	
	guard : s.type = 'BOOLEAN'
	
	t.value := s.text;
	t.type := 'Boolean'.getPrimitiveType();
}

rule Float2LiteralExpression
	transform s : CS!AST
	to t : AS!LiteralExpression {
	
	guard : s.type = 'FLOAT'
	
	t.value := s.text;
	t.type := 'Real'.getPrimitiveType();
}

rule Int2LiteralExpression
	transform s : CS!AST
	to t : AS!LiteralExpression {
	
	guard : s.type = 'INT'
	
	t.value := s.text;
	t.type := 'Integer'.getPrimitiveType();
}

rule EnumerationValue2EnumerationLiteralExpression
	transform s : CS!AST
	to t : AS!EnumerationLiteralExpression {
	
	guard : s.type = 'ENUMERATION_VALUE'
	
	var enumerationAndLabel : String;
	
	if ('!'.isSubstringOf(s.text)) {
		var parts := s.text.split('!');
		t."model" := parts.at(0);
		enumerationAndLabel := parts.at(1);
	}
	
	var parts := enumerationAndLabel.split('#');
	t.enumeration := parts.at(0);
	t.literal := parts.at(1);
}

rule New2NewExpression 
	transform s : CS!AST
	to t : AS!NewExpression {
	
	guard : s.type = 'NEW'
	
	t.type := s.children.at(0).getType();
	
}

rule Collection2RangeCollectionExpression
	transform s : CS!AST
	to t : AS!RangeCollectionExpression {
	
	guard : s.type = 'COLLECTION' and
		s.children.at(0).type = 'EXPRRANGE'
	
	t.collectionType := s.getType();
	t.lowerBound ::= s.children.at(0).children.at(0);
	t.upperBound ::= s.children.at(0).children.at(1);	
}

rule Collection2LiteralCollectionExpression
	transform s : CS!AST
	to t : AS!LiteralCollectionExpression {
	
	guard : s.type = 'COLLECTION' and
		s.children.at(0).type = 'EXPRLIST'
	
	t.collectionType := s.getType();
	t.literals ::= s.children.at(0).children;
}


rule Name2VariableReference 
	transform s : CS!AST
	to t : AS!VariableReferenceExpression {
	
	guard : s.type = 'NAME' and 
		(not '!'.isSubstringOf(s.text))
		--and not s.isOperationName()
	
	t.referencedVariable := s.text;
	
}

operation CS!AST isOperationName() : Boolean {
	return self.type = 'NAME' and self.parent.type = 'HELPERMETHOD';
}



rule Name2ModelElementType 
	transform s : CS!AST
	to t : AS!ModelElementType {
	
	guard : s.type = 'NAME' and '!'.isSubstringOf(s.text) 
	
	s.text.populateModelElementType(t);
	
}


operation CS!AST isOperationCall() : Boolean {
	return (self.type = 'POINT' or self.type = 'ARROW')
		and (not self.children.at(1).children.isEmpty());
} 

operation CS!AST isPropertyCall() : Boolean {
	return self.type = 'POINT' and 
		self.children.at(1).children.isEmpty();
}

operation CS!AST isSimpleOperationCall() : Boolean {
	return self.isOperationCall() and
		self.children.at(1).children.at(0).type = 'PARAMETERS';
}

operation CS!AST isDeclarativeOperationCall() : Boolean {
	return self.isOperationCall() and
		self.children.at(1).children.at(0).type = 'PARAMETERSDEFININGVARS';
}

operation CS!AST isDeclarativeOperationCall() : Boolean {
	return self.type = 'POINT' and
		self.children.at(1).children.size() > 0 and
		self.children.at(1).children.at(0).type = 'PARAMETERSDEFININGVARS';
}

operation String getCollectionType() : VM!PrimitiveType {
	return VM!CollectionType.allOfType.selectOne(pt|pt.name = self);
}

operation Any getType() : AS!Type {

	var typeName := self.text;
	
	var primitiveType := typeName.getPrimitiveType();
	
	if (primitiveType.isDefined()){return primitiveType;}
	
	var collectionType := typeName.getCollectionType();
	
	if (collectionType.isDefined()) {
		
		var contentType;
		
		if (self.children.size() = 1 and self.children.at(0).type = 'TYPE') {
			contentType := self.children.at(0).getType();
		}
		else {
			contentType := 'Any'.getPrimitiveType();
		}
		
		var typedCollectionType := new AS!TypedCollectionType;
		typedCollectionType.collectionType := collectionType;
		typedCollectionType.contentType := contentType;
		return typedCollectionType;
	}
	
	if (typeName = 'Native') {
		var nativeType := new AS!NativeType;
		nativeType.name := self.children.at(0).text;
		return nativeType;
	}
	
	var modelElementType := new AS!ModelElementType;
	typeName.populateModelElementType(modelElementType);
	return modelElementType;
}

operation String populateModelElementType(modelElementType : AS!ModelElementType) {
	if ('!'.isSubstringOf(self)) {
		var parts := self.split('!');
		modelElementType.name := parts.at(1);
		modelElementType."model" := parts.at(0);
	}
	else {
		modelElementType.name := self;
	}	
}