/*
 * 
 */
package farrusco.diagram.edit.parts;

/**
 * @generated
 */
public class PrioridadeEditPart extends org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart  {

			/**
 * @generated
 */
	public static final int VISUAL_ID = 2007;

	/**
 * @generated
 */
	protected org.eclipse.draw2d.IFigure contentPane;

	/**
 * @generated
 */
	protected org.eclipse.draw2d.IFigure primaryShape;
	
		/**
 * @generated
 */
	public PrioridadeEditPart(org.eclipse.gmf.runtime.notation.View view) {
		super(view);
	}
	
		/**
 * @generated
 */
	protected void createDefaultEditPolicies() {
				super.createDefaultEditPolicies();
			installEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.SEMANTIC_ROLE, new farrusco.diagram.edit.policies.PrioridadeItemSemanticEditPolicy());
						installEditPolicy(org.eclipse.gef.EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());
			// XXX need an SCR to runtime to have another abstract superclass that would let children add reasonable editpolicies
	// removeEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.CONNECTION_HANDLES_ROLE);
	}
	
		/**
 * @generated
 */
	protected org.eclipse.gef.editpolicies.LayoutEditPolicy createLayoutEditPolicy() {
					org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy lep = new org.eclipse.gmf.runtime.diagram.ui.editpolicies.LayoutEditPolicy() {

			protected org.eclipse.gef.EditPolicy createChildEditPolicy(org.eclipse.gef.EditPart child) {
								org.eclipse.gef.EditPolicy result = child.getEditPolicy(org.eclipse.gef.EditPolicy.PRIMARY_DRAG_ROLE);
				if (result == null) {
					result = new org.eclipse.gef.editpolicies.NonResizableEditPolicy();
				}
				return result;
			}

			protected org.eclipse.gef.commands.Command getMoveChildrenCommand(org.eclipse.gef.Request request) {
				return null;
			}

			protected org.eclipse.gef.commands.Command getCreateCommand(org.eclipse.gef.requests.CreateRequest request) {
				return null;
			}
		};
		return lep;
		}
	
				/**
 * @generated
 */
		protected org.eclipse.draw2d.IFigure createNodeShape() {
			return primaryShape = new figuresPlan.figures.PrioridadeFigure();
		}

			/**
 * @generated
 */
	public figuresPlan.figures.PrioridadeFigure getPrimaryShape() {
		return (figuresPlan.figures.PrioridadeFigure) primaryShape;
	}
		

			
		/**
 * @generated
 */
	protected org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure createNodePlate() {
		org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure result = new org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure(40, 40);
				return result;
	}
	
						
		/**
 * Creates figure for this edit part.
 * 
 * Body of this method does not depend on settings in generation model
 * so you may safely remove <i>generated</i> tag and modify it.
 * 
 * @generated
 */
	protected org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure createNodeFigure() {
		org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure figure = createNodePlate();
		figure.setLayoutManager(new org.eclipse.draw2d.StackLayout());
		org.eclipse.draw2d.IFigure shape = createNodeShape();
		figure.add(shape);
		contentPane = setupContentPane(shape);
		return figure;
	}
	
		/**
 * Default implementation treats passed figure as content pane.
 * Respects layout one may have set for generated figure.
 * @param nodeShape instance of generated figure class
 * @generated
 */
	protected org.eclipse.draw2d.IFigure setupContentPane(org.eclipse.draw2d.IFigure nodeShape) {
				return nodeShape; // use nodeShape itself as contentPane
	}
	
		/**
 * @generated
 */
	public org.eclipse.draw2d.IFigure getContentPane() {
		if (contentPane != null) {
			return contentPane;
		}
		return super.getContentPane();
	}

		/**
 * @generated
 */
	protected void setForegroundColor(org.eclipse.swt.graphics.Color color) {
		if (primaryShape != null) {
			primaryShape.setForegroundColor(color);
		}
	}

		/**
 * @generated
 */
	protected void setBackgroundColor(org.eclipse.swt.graphics.Color color) {
		if (primaryShape != null) {
			primaryShape.setBackgroundColor(color);
		}
	}

		/**
 * @generated
 */
	protected void setLineWidth(int width) {
		if (primaryShape instanceof org.eclipse.draw2d.Shape) {
			((org.eclipse.draw2d.Shape) primaryShape).setLineWidth(width);
		}
	}

		/**
 * @generated
 */
	protected void setLineType(int style) {
		if (primaryShape instanceof org.eclipse.draw2d.Shape) {
			((org.eclipse.draw2d.Shape) primaryShape).setLineStyle(style);
		}
	}

		
		/**
 * @generated
 */
	public java.util.List<org.eclipse.gmf.runtime.emf.type.core.IElementType> getMARelTypesOnSource() {
		java.util.ArrayList<org.eclipse.gmf.runtime.emf.type.core.IElementType> types = new java.util.ArrayList<org.eclipse.gmf.runtime.emf.type.core.IElementType>(2);
				types.add(farrusco.diagram.providers.FarruscoElementTypes.Filho_4001);
				types.add(farrusco.diagram.providers.FarruscoElementTypes.Irmao_4002);
				return types;
	}

		/**
 * @generated
 */
	public java.util.List<org.eclipse.gmf.runtime.emf.type.core.IElementType> getMARelTypesOnSourceAndTarget(org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart targetEditPart) {
		java.util.LinkedList<org.eclipse.gmf.runtime.emf.type.core.IElementType> types = new java.util.LinkedList<org.eclipse.gmf.runtime.emf.type.core.IElementType>();
							if (targetEditPart instanceof farrusco.diagram.edit.parts.DistanciaEditPart) {
			types.add(farrusco.diagram.providers.FarruscoElementTypes.Filho_4001);
		}
					if (targetEditPart instanceof farrusco.diagram.edit.parts.BumpersEditPart) {
			types.add(farrusco.diagram.providers.FarruscoElementTypes.Filho_4001);
		}
					if (targetEditPart instanceof farrusco.diagram.edit.parts.EsperaEditPart) {
			types.add(farrusco.diagram.providers.FarruscoElementTypes.Filho_4001);
		}
					if (targetEditPart instanceof farrusco.diagram.edit.parts.MotorEditPart) {
			types.add(farrusco.diagram.providers.FarruscoElementTypes.Filho_4001);
		}
					if (targetEditPart instanceof farrusco.diagram.edit.parts.ServoEditPart) {
			types.add(farrusco.diagram.providers.FarruscoElementTypes.Filho_4001);
		}
					if (targetEditPart instanceof farrusco.diagram.edit.parts.LEDEditPart) {
			types.add(farrusco.diagram.providers.FarruscoElementTypes.Filho_4001);
		}
					if (targetEditPart instanceof farrusco.diagram.edit.parts.PrioridadeEditPart) {
			types.add(farrusco.diagram.providers.FarruscoElementTypes.Filho_4001);
		}
					if (targetEditPart instanceof farrusco.diagram.edit.parts.ParaleloEditPart) {
			types.add(farrusco.diagram.providers.FarruscoElementTypes.Filho_4001);
		}
					if (targetEditPart instanceof farrusco.diagram.edit.parts.SequencialEditPart) {
			types.add(farrusco.diagram.providers.FarruscoElementTypes.Filho_4001);
		}
										if (targetEditPart instanceof farrusco.diagram.edit.parts.DistanciaEditPart) {
			types.add(farrusco.diagram.providers.FarruscoElementTypes.Irmao_4002);
		}
					if (targetEditPart instanceof farrusco.diagram.edit.parts.BumpersEditPart) {
			types.add(farrusco.diagram.providers.FarruscoElementTypes.Irmao_4002);
		}
					if (targetEditPart instanceof farrusco.diagram.edit.parts.EsperaEditPart) {
			types.add(farrusco.diagram.providers.FarruscoElementTypes.Irmao_4002);
		}
					if (targetEditPart instanceof farrusco.diagram.edit.parts.MotorEditPart) {
			types.add(farrusco.diagram.providers.FarruscoElementTypes.Irmao_4002);
		}
					if (targetEditPart instanceof farrusco.diagram.edit.parts.ServoEditPart) {
			types.add(farrusco.diagram.providers.FarruscoElementTypes.Irmao_4002);
		}
					if (targetEditPart instanceof farrusco.diagram.edit.parts.LEDEditPart) {
			types.add(farrusco.diagram.providers.FarruscoElementTypes.Irmao_4002);
		}
					if (targetEditPart instanceof farrusco.diagram.edit.parts.PrioridadeEditPart) {
			types.add(farrusco.diagram.providers.FarruscoElementTypes.Irmao_4002);
		}
					if (targetEditPart instanceof farrusco.diagram.edit.parts.ParaleloEditPart) {
			types.add(farrusco.diagram.providers.FarruscoElementTypes.Irmao_4002);
		}
					if (targetEditPart instanceof farrusco.diagram.edit.parts.SequencialEditPart) {
			types.add(farrusco.diagram.providers.FarruscoElementTypes.Irmao_4002);
		}
							return types;
	}

		/**
 * @generated
 */
	public java.util.List<org.eclipse.gmf.runtime.emf.type.core.IElementType> getMATypesForTarget(org.eclipse.gmf.runtime.emf.type.core.IElementType relationshipType) {
		java.util.LinkedList<org.eclipse.gmf.runtime.emf.type.core.IElementType> types = new java.util.LinkedList<org.eclipse.gmf.runtime.emf.type.core.IElementType>();
				if (relationshipType == farrusco.diagram.providers.FarruscoElementTypes.Filho_4001) {
						types.add(farrusco.diagram.providers.FarruscoElementTypes.Distancia_2001);
						types.add(farrusco.diagram.providers.FarruscoElementTypes.Bumpers_2002);
						types.add(farrusco.diagram.providers.FarruscoElementTypes.Espera_2003);
						types.add(farrusco.diagram.providers.FarruscoElementTypes.Motor_2004);
						types.add(farrusco.diagram.providers.FarruscoElementTypes.Servo_2005);
						types.add(farrusco.diagram.providers.FarruscoElementTypes.LED_2006);
						types.add(farrusco.diagram.providers.FarruscoElementTypes.Prioridade_2007);
						types.add(farrusco.diagram.providers.FarruscoElementTypes.Paralelo_2008);
						types.add(farrusco.diagram.providers.FarruscoElementTypes.Sequencial_2009);
					}
		 else 		if (relationshipType == farrusco.diagram.providers.FarruscoElementTypes.Irmao_4002) {
						types.add(farrusco.diagram.providers.FarruscoElementTypes.Distancia_2001);
						types.add(farrusco.diagram.providers.FarruscoElementTypes.Bumpers_2002);
						types.add(farrusco.diagram.providers.FarruscoElementTypes.Espera_2003);
						types.add(farrusco.diagram.providers.FarruscoElementTypes.Motor_2004);
						types.add(farrusco.diagram.providers.FarruscoElementTypes.Servo_2005);
						types.add(farrusco.diagram.providers.FarruscoElementTypes.LED_2006);
						types.add(farrusco.diagram.providers.FarruscoElementTypes.Prioridade_2007);
						types.add(farrusco.diagram.providers.FarruscoElementTypes.Paralelo_2008);
						types.add(farrusco.diagram.providers.FarruscoElementTypes.Sequencial_2009);
					}
				return types;
	}

		/**
 * @generated
 */
	public java.util.List<org.eclipse.gmf.runtime.emf.type.core.IElementType> getMARelTypesOnTarget() {
		java.util.ArrayList<org.eclipse.gmf.runtime.emf.type.core.IElementType> types = new java.util.ArrayList<org.eclipse.gmf.runtime.emf.type.core.IElementType>(2);
				types.add(farrusco.diagram.providers.FarruscoElementTypes.Filho_4001);
				types.add(farrusco.diagram.providers.FarruscoElementTypes.Irmao_4002);
				return types;
	}

		/**
 * @generated
 */
	public java.util.List<org.eclipse.gmf.runtime.emf.type.core.IElementType> getMATypesForSource(org.eclipse.gmf.runtime.emf.type.core.IElementType relationshipType) {
		java.util.LinkedList<org.eclipse.gmf.runtime.emf.type.core.IElementType> types = new java.util.LinkedList<org.eclipse.gmf.runtime.emf.type.core.IElementType>();
				if (relationshipType == farrusco.diagram.providers.FarruscoElementTypes.Filho_4001) {
						types.add(farrusco.diagram.providers.FarruscoElementTypes.Prioridade_2007);
						types.add(farrusco.diagram.providers.FarruscoElementTypes.Paralelo_2008);
						types.add(farrusco.diagram.providers.FarruscoElementTypes.Sequencial_2009);
					}
		 else 		if (relationshipType == farrusco.diagram.providers.FarruscoElementTypes.Irmao_4002) {
						types.add(farrusco.diagram.providers.FarruscoElementTypes.Distancia_2001);
						types.add(farrusco.diagram.providers.FarruscoElementTypes.Bumpers_2002);
						types.add(farrusco.diagram.providers.FarruscoElementTypes.Espera_2003);
						types.add(farrusco.diagram.providers.FarruscoElementTypes.Motor_2004);
						types.add(farrusco.diagram.providers.FarruscoElementTypes.Servo_2005);
						types.add(farrusco.diagram.providers.FarruscoElementTypes.LED_2006);
						types.add(farrusco.diagram.providers.FarruscoElementTypes.Prioridade_2007);
						types.add(farrusco.diagram.providers.FarruscoElementTypes.Paralelo_2008);
						types.add(farrusco.diagram.providers.FarruscoElementTypes.Sequencial_2009);
					}
				return types;
	}


		
			/**
 * @generated
 */
		protected void handleNotificationEvent(org.eclipse.emf.common.notify.Notification event) {
				if (event.getNotifier() == getModel() && org.eclipse.emf.ecore.EcorePackage.eINSTANCE.getEModelElement_EAnnotations().equals(event.getFeature())) {
		handleMajorSemanticChange();
	} else {
		super.handleNotificationEvent(event);
	}
		}
	
	
	
	}
