#include <BehaviorTree.h>
#include <Intro.h>

void setup(){
    
[%var all_instances := Robot.allInstances();%]
[%var all_nodes := Node.allInstances();%]
[%var all_nodes2 := Node.allInstances();%]
[%var root2 := all_nodes2.getRoot();%]
[%var all_actions := ActionChild.allInstances();%]
[%var all_childs := Child.allInstances();%]
[%var all_next := Next.allInstances();%]
[%var nodie := Node.allInstances.at(3);%]
[*[%out.println("SOU A ROOT "+ root2);%]
[%out.println(nodie);%]
[%out.println(all_next.select(tee|tee.target.asSequence.at(0) = nodie));%]
[%= all_actions.size() + "lala"%]
[%= all_childs.size()%]
*]
    Serial.begin(9600);
    pinMode(13, OUTPUT);
   
[*AQUI VAMOS POR A ORDEM DAS CENAS*]

         
}
void loop(){
[%=root2.declareRoot()%]  
[%var root_obj := root2.obj_root();%]
brain[%var r := root2.getFilhos22();r.metodo2();%]
[%out.println(";");%]
brain->execute(0);
free(brain);

}
[%
operation Sequence getRoot(): Node{
	var all_childs := Child.allInstances();	
	for(y in self){
		if(not(y.isAction())){
			if((all_childs.select(tee|tee.target.at(0) = y)).isEmpty)
			return y;
		}
	}
}
operation Node getType(): Boolean {

	switch(self.type.name){
		case "Motors" : return true;break;
		case "LED" : return true;break;
	}
	return false;
}


operation Node getFilhos22(): Sequence {
	var arr :  Sequence;
	var all_actions := ActionChild.allInstances();
	var all_childs := Child.allInstances();	
	var all_nexts := Next.allInstances();
	var all_nodes := Node.allInstances();
	for (t22 in all_actions){
		if(t22.source.asSequence().at(0) == self){
			//out.println("KAZAM"+t22.target.at(0));
			arr.add(t22.target.at(0));
		}
	}
	
	for(ta2 in all_childs){
		
		if(ta2.source.asSequence().at(0) == self)
			arr.add(ta2.target.at(0));
		
	}
	//lets order the childs
	if (arr.size == 1)
		return arr;
	else{
		var arr2 : Sequence;
		//out.println("TAMANHO DOS NOS" +arr.size());
		for (x in arr){//x é um NODE
			//out.println("CAMUMBA " + x);
			//out.println("OIOI " + all_nexts.select(tee|tee.target.at(0) = x));
			var temp := all_nexts.select(tee|tee.target.at(0) = x);
			if(temp.isEmpty()){
				//out.println("ENCONTRADO" + x);// este X é um node
				arr2.add(x);
				break;
			}
		}
		var t := arr2.at(0);//problema AQUIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII
		while(not (t==null)){
			//out.println("NOOOO " + t);//NODE
			var temp := all_nexts.select(tee|tee.source.at(0) = t);
			//out.println(temp.isEmpty());
			if(temp.isEmpty()){
				break;
			}
			
			t := temp.at(0).target.at(0);
			arr2.add(temp.at(0).target.at(0));
		}
		return arr2;
	}
}

operation Sequence metodo2(){
	for (y in self){
		if(y.isAction()){
			out.print(y.printAction());
		} 
		else{
			out.print(y.printBehNode());
			var s := y.getFilhos22();
			if(not(s.isEmpty())){
				s.metodo2();
				out.print(")");
			}
		}
	}
}

operation Node declareNode(): String{
	switch(self.type.name){
		case "Motors" : return self.declareMotors();break;
		case "LED" : return self.declareLED();break;
		case "RightBumper" : return self.declareRightBumper();break;
		case "LeftBumper" : return self.declareLeftBumper();break;
		case "IRdist" : return self.declareIRSense();break;
		case "Wait" : return self.declareWait();break;
		case "ServoRange" : return self.declareServoRange();break;
		case "Prior": return self.declarePriority();break;
		case "Paralell": return self.declareParallel();break;
		case "Sequential": return self.declareSequential();break;
	}
	return str;

}

operation Node declareMotors(): String{
	return "SL::Behaviors::Motor* mt"+self.id.subString(9)+" = new SL::Behaviors::Motor("+self.MotorLeft+","+self.MotorRight+"); ";
}

operation Node declareLED(): String{
   	return "SL::Behaviors::TurnLed* tl"+self.id.subString(9)+" = new SL::Behaviors::TurnLed();";
}

operation Node declareWait(): String{
	return "SL::Behaviors::DelayTime* wt"+self.id.subString(9)+" = new SL::Behaviors::DelayTime("+self.time+"); ";
}

operation Node declareRightBumper(): String{
   	return "SL::Behaviors::RightBumper* rb"+self.id.subString(9)+" = new SL::Behaviors::RightBumper();";
}

operation Node declareLeftBumper(): String{
   	return "SL::Behaviors::LeftBumper* lb"+self.id.subString(9)+" = new SL::Behaviors::LeftBumper();";
}

operation Node declareIRSense(): String{
	return "SL::Behaviors::IRSense* ir"+self.id.subString(9)+" = new SL::Behaviors::IRSense("+self.distancia+","+self.how_sucess+"); ";
}

operation Node declareServoRange(): String{
	return "SL::Behaviors::ServoRange* ir"+self.id.subString(9)+" = new SL::Behaviors::ServoRange("+self.min+","+self.max+self.inc+"); ";
}



operation Node declareParallel(): String{
	return "BehaviorTree::ParallelNode* p"+self.id.substring(9)+" = new BehaviorTree::ParallelNode();";
}
operation Node declareSequential(): String{
	return "BehaviorTree::SequentialNode* s"+self.id.substring(9)+" = new BehaviorTree::SequentialNode();";
}

operation Node declarePriority(): String{
	return "BehaviorTree::PriorityNode* pr"+self.id.substring(9)+" = new BehaviorTree::PriorityNode();";
}

operation Node declareRoot(): String{
	switch(self.type.name){
		case "Prior": return "BehaviorTree::PriorityNode* brain = new BehaviorTree::PriorityNode();";break;
		case "Sequential" :return "BehaviorTree::SequentialNode* brain = new BehaviorTree::SequentialNode();";break;
		case "Paralell": return "BehaviorTree::ParallelNode* brain = new BehaviorTree::ParallelNode();";break;
	}
}
operation Node obj_root(): String{
	switch(self.type.name){
		case "Prior": return "pr"+self.id.substring(9);break;
		case "Paralell": return "p"+self.id.substring(9);break;
		case "Sequential": return "s"+self.id.substring(9);break;
	}
}

operation Node isAction(): Boolean{
	switch(self.type.name){
		case "Prior": return false;break;
		case "Paralell": return false;break;
		case "Sequential": return false;break;
		default: return true;break;
	}
	
}
operation Node printBehNode(): String{
	switch(self.type.name){
		case "Prior": return "->addChild((new BehaviorTree::PriorityNode())";break;
		case "Paralell" : return "->addChild((new BehaviorTree::ParallelNode())";break;
		case "Sequential": return "->addChild((new BehaviorTree::SequentialNode())";break;
	}
}
operation Node printAction(): String{
	switch(self.type.name){
		case "Motors" : return "->addChild(new SL::Behaviors::Motor("+self.MotorLeft+","+self.MotorRight+ "))";break;
		case "LED" : return "->addChild(new SL::Behaviors::TurnLed())";break;
		case "RightBumper" : return "->addChild(new SL::Behaviors::RightBumper())";break;
		case "LeftBumper" : return "->addChild(new SL::Behaviors::LeftBumper())";break;
		case "IRdist" : return "->addChild(new SL::Behaviors::IRSense("+self.distancia+","+self.how_sucess+"))";break;
		case "Wait" : return "->addChild(new SL::Behaviors::DelayTime("+self.time+"))";break;
		case "ServoRange" : return "->addChild(new SL::Behaviors::ServoRange("+self.min+","+self.max+self.inc+"))";break;
	}
}
%]

