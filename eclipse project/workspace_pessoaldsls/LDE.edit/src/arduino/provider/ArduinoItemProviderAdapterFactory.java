/**
 */
package arduino.provider;

import arduino.util.ArduinoAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ArduinoItemProviderAdapterFactory extends ArduinoAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArduinoItemProviderAdapterFactory()
  {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link arduino.Robo} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RoboItemProvider roboItemProvider;

  /**
   * This creates an adapter for a {@link arduino.Robo}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createRoboAdapter()
  {
    if (roboItemProvider == null)
    {
      roboItemProvider = new RoboItemProvider(this);
    }

    return roboItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link arduino.Transicoes} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TransicoesItemProvider transicoesItemProvider;

  /**
   * This creates an adapter for a {@link arduino.Transicoes}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTransicoesAdapter()
  {
    if (transicoesItemProvider == null)
    {
      transicoesItemProvider = new TransicoesItemProvider(this);
    }

    return transicoesItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link arduino.Virar_Esquerda} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Virar_EsquerdaItemProvider virar_EsquerdaItemProvider;

  /**
   * This creates an adapter for a {@link arduino.Virar_Esquerda}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createVirar_EsquerdaAdapter()
  {
    if (virar_EsquerdaItemProvider == null)
    {
      virar_EsquerdaItemProvider = new Virar_EsquerdaItemProvider(this);
    }

    return virar_EsquerdaItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link arduino.Mover_Frente} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Mover_FrenteItemProvider mover_FrenteItemProvider;

  /**
   * This creates an adapter for a {@link arduino.Mover_Frente}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMover_FrenteAdapter()
  {
    if (mover_FrenteItemProvider == null)
    {
      mover_FrenteItemProvider = new Mover_FrenteItemProvider(this);
    }

    return mover_FrenteItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link arduino.Mover_Tras} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Mover_TrasItemProvider mover_TrasItemProvider;

  /**
   * This creates an adapter for a {@link arduino.Mover_Tras}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMover_TrasAdapter()
  {
    if (mover_TrasItemProvider == null)
    {
      mover_TrasItemProvider = new Mover_TrasItemProvider(this);
    }

    return mover_TrasItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link arduino.Virar_Direita} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Virar_DireitaItemProvider virar_DireitaItemProvider;

  /**
   * This creates an adapter for a {@link arduino.Virar_Direita}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createVirar_DireitaAdapter()
  {
    if (virar_DireitaItemProvider == null)
    {
      virar_DireitaItemProvider = new Virar_DireitaItemProvider(this);
    }

    return virar_DireitaItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link arduino.Rodar_Esquerda_Tempo} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Rodar_Esquerda_TempoItemProvider rodar_Esquerda_TempoItemProvider;

  /**
   * This creates an adapter for a {@link arduino.Rodar_Esquerda_Tempo}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createRodar_Esquerda_TempoAdapter()
  {
    if (rodar_Esquerda_TempoItemProvider == null)
    {
      rodar_Esquerda_TempoItemProvider = new Rodar_Esquerda_TempoItemProvider(this);
    }

    return rodar_Esquerda_TempoItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link arduino.Rodar_Direita_Tempo} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Rodar_Direita_TempoItemProvider rodar_Direita_TempoItemProvider;

  /**
   * This creates an adapter for a {@link arduino.Rodar_Direita_Tempo}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createRodar_Direita_TempoAdapter()
  {
    if (rodar_Direita_TempoItemProvider == null)
    {
      rodar_Direita_TempoItemProvider = new Rodar_Direita_TempoItemProvider(this);
    }

    return rodar_Direita_TempoItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link arduino.Mover_Frente_Tempo} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Mover_Frente_TempoItemProvider mover_Frente_TempoItemProvider;

  /**
   * This creates an adapter for a {@link arduino.Mover_Frente_Tempo}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMover_Frente_TempoAdapter()
  {
    if (mover_Frente_TempoItemProvider == null)
    {
      mover_Frente_TempoItemProvider = new Mover_Frente_TempoItemProvider(this);
    }

    return mover_Frente_TempoItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link arduino.Mover_Tras_Tempo} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Mover_Tras_TempoItemProvider mover_Tras_TempoItemProvider;

  /**
   * This creates an adapter for a {@link arduino.Mover_Tras_Tempo}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMover_Tras_TempoAdapter()
  {
    if (mover_Tras_TempoItemProvider == null)
    {
      mover_Tras_TempoItemProvider = new Mover_Tras_TempoItemProvider(this);
    }

    return mover_Tras_TempoItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link arduino.Virar_para_X_Graus} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Virar_para_X_GrausItemProvider virar_para_X_GrausItemProvider;

  /**
   * This creates an adapter for a {@link arduino.Virar_para_X_Graus}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createVirar_para_X_GrausAdapter()
  {
    if (virar_para_X_GrausItemProvider == null)
    {
      virar_para_X_GrausItemProvider = new Virar_para_X_GrausItemProvider(this);
    }

    return virar_para_X_GrausItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link arduino.Virar_Max_Drt} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Virar_Max_DrtItemProvider virar_Max_DrtItemProvider;

  /**
   * This creates an adapter for a {@link arduino.Virar_Max_Drt}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createVirar_Max_DrtAdapter()
  {
    if (virar_Max_DrtItemProvider == null)
    {
      virar_Max_DrtItemProvider = new Virar_Max_DrtItemProvider(this);
    }

    return virar_Max_DrtItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link arduino.Virar_Max_Esq} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Virar_Max_EsqItemProvider virar_Max_EsqItemProvider;

  /**
   * This creates an adapter for a {@link arduino.Virar_Max_Esq}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createVirar_Max_EsqAdapter()
  {
    if (virar_Max_EsqItemProvider == null)
    {
      virar_Max_EsqItemProvider = new Virar_Max_EsqItemProvider(this);
    }

    return virar_Max_EsqItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link arduino.Centrar} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CentrarItemProvider centrarItemProvider;

  /**
   * This creates an adapter for a {@link arduino.Centrar}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCentrarAdapter()
  {
    if (centrarItemProvider == null)
    {
      centrarItemProvider = new CentrarItemProvider(this);
    }

    return centrarItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link arduino.Virar_45_Esq} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Virar_45_EsqItemProvider virar_45_EsqItemProvider;

  /**
   * This creates an adapter for a {@link arduino.Virar_45_Esq}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createVirar_45_EsqAdapter()
  {
    if (virar_45_EsqItemProvider == null)
    {
      virar_45_EsqItemProvider = new Virar_45_EsqItemProvider(this);
    }

    return virar_45_EsqItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link arduino.Virar_45_Drt} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Virar_45_DrtItemProvider virar_45_DrtItemProvider;

  /**
   * This creates an adapter for a {@link arduino.Virar_45_Drt}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createVirar_45_DrtAdapter()
  {
    if (virar_45_DrtItemProvider == null)
    {
      virar_45_DrtItemProvider = new Virar_45_DrtItemProvider(this);
    }

    return virar_45_DrtItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link arduino.Mover_Aleatoriamente} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Mover_AleatoriamenteItemProvider mover_AleatoriamenteItemProvider;

  /**
   * This creates an adapter for a {@link arduino.Mover_Aleatoriamente}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMover_AleatoriamenteAdapter()
  {
    if (mover_AleatoriamenteItemProvider == null)
    {
      mover_AleatoriamenteItemProvider = new Mover_AleatoriamenteItemProvider(this);
    }

    return mover_AleatoriamenteItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link arduino.Ligar_LED_Verde} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Ligar_LED_VerdeItemProvider ligar_LED_VerdeItemProvider;

  /**
   * This creates an adapter for a {@link arduino.Ligar_LED_Verde}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createLigar_LED_VerdeAdapter()
  {
    if (ligar_LED_VerdeItemProvider == null)
    {
      ligar_LED_VerdeItemProvider = new Ligar_LED_VerdeItemProvider(this);
    }

    return ligar_LED_VerdeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link arduino.Desligar_LED_Verde} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Desligar_LED_VerdeItemProvider desligar_LED_VerdeItemProvider;

  /**
   * This creates an adapter for a {@link arduino.Desligar_LED_Verde}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDesligar_LED_VerdeAdapter()
  {
    if (desligar_LED_VerdeItemProvider == null)
    {
      desligar_LED_VerdeItemProvider = new Desligar_LED_VerdeItemProvider(this);
    }

    return desligar_LED_VerdeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link arduino.Ligar_Intermitencia} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Ligar_IntermitenciaItemProvider ligar_IntermitenciaItemProvider;

  /**
   * This creates an adapter for a {@link arduino.Ligar_Intermitencia}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createLigar_IntermitenciaAdapter()
  {
    if (ligar_IntermitenciaItemProvider == null)
    {
      ligar_IntermitenciaItemProvider = new Ligar_IntermitenciaItemProvider(this);
    }

    return ligar_IntermitenciaItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link arduino.Desligar_Intermitencia} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Desligar_IntermitenciaItemProvider desligar_IntermitenciaItemProvider;

  /**
   * This creates an adapter for a {@link arduino.Desligar_Intermitencia}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDesligar_IntermitenciaAdapter()
  {
    if (desligar_IntermitenciaItemProvider == null)
    {
      desligar_IntermitenciaItemProvider = new Desligar_IntermitenciaItemProvider(this);
    }

    return desligar_IntermitenciaItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link arduino.Ligar_Cores_Policia} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Ligar_Cores_PoliciaItemProvider ligar_Cores_PoliciaItemProvider;

  /**
   * This creates an adapter for a {@link arduino.Ligar_Cores_Policia}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createLigar_Cores_PoliciaAdapter()
  {
    if (ligar_Cores_PoliciaItemProvider == null)
    {
      ligar_Cores_PoliciaItemProvider = new Ligar_Cores_PoliciaItemProvider(this);
    }

    return ligar_Cores_PoliciaItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link arduino.Ligar_Cores_Arco_Iris} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Ligar_Cores_Arco_IrisItemProvider ligar_Cores_Arco_IrisItemProvider;

  /**
   * This creates an adapter for a {@link arduino.Ligar_Cores_Arco_Iris}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createLigar_Cores_Arco_IrisAdapter()
  {
    if (ligar_Cores_Arco_IrisItemProvider == null)
    {
      ligar_Cores_Arco_IrisItemProvider = new Ligar_Cores_Arco_IrisItemProvider(this);
    }

    return ligar_Cores_Arco_IrisItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link arduino.Ligar_Azul} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Ligar_AzulItemProvider ligar_AzulItemProvider;

  /**
   * This creates an adapter for a {@link arduino.Ligar_Azul}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createLigar_AzulAdapter()
  {
    if (ligar_AzulItemProvider == null)
    {
      ligar_AzulItemProvider = new Ligar_AzulItemProvider(this);
    }

    return ligar_AzulItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link arduino.Ligar_Verde} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Ligar_VerdeItemProvider ligar_VerdeItemProvider;

  /**
   * This creates an adapter for a {@link arduino.Ligar_Verde}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createLigar_VerdeAdapter()
  {
    if (ligar_VerdeItemProvider == null)
    {
      ligar_VerdeItemProvider = new Ligar_VerdeItemProvider(this);
    }

    return ligar_VerdeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link arduino.Ligar_Vermelho} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Ligar_VermelhoItemProvider ligar_VermelhoItemProvider;

  /**
   * This creates an adapter for a {@link arduino.Ligar_Vermelho}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createLigar_VermelhoAdapter()
  {
    if (ligar_VermelhoItemProvider == null)
    {
      ligar_VermelhoItemProvider = new Ligar_VermelhoItemProvider(this);
    }

    return ligar_VermelhoItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link arduino.Desligar_Cor} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Desligar_CorItemProvider desligar_CorItemProvider;

  /**
   * This creates an adapter for a {@link arduino.Desligar_Cor}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDesligar_CorAdapter()
  {
    if (desligar_CorItemProvider == null)
    {
      desligar_CorItemProvider = new Desligar_CorItemProvider(this);
    }

    return desligar_CorItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link arduino.Desligar_Cores} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Desligar_CoresItemProvider desligar_CoresItemProvider;

  /**
   * This creates an adapter for a {@link arduino.Desligar_Cores}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDesligar_CoresAdapter()
  {
    if (desligar_CoresItemProvider == null)
    {
      desligar_CoresItemProvider = new Desligar_CoresItemProvider(this);
    }

    return desligar_CoresItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link arduino.While} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected WhileItemProvider whileItemProvider;

  /**
   * This creates an adapter for a {@link arduino.While}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createWhileAdapter()
  {
    if (whileItemProvider == null)
    {
      whileItemProvider = new WhileItemProvider(this);
    }

    return whileItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link arduino.If} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IfItemProvider ifItemProvider;

  /**
   * This creates an adapter for a {@link arduino.If}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createIfAdapter()
  {
    if (ifItemProvider == null)
    {
      ifItemProvider = new IfItemProvider(this);
    }

    return ifItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link arduino.Bumper_Pressionado} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Bumper_PressionadoItemProvider bumper_PressionadoItemProvider;

  /**
   * This creates an adapter for a {@link arduino.Bumper_Pressionado}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createBumper_PressionadoAdapter()
  {
    if (bumper_PressionadoItemProvider == null)
    {
      bumper_PressionadoItemProvider = new Bumper_PressionadoItemProvider(this);
    }

    return bumper_PressionadoItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link arduino.Distancia_Infra_Vermelhos} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Distancia_Infra_VermelhosItemProvider distancia_Infra_VermelhosItemProvider;

  /**
   * This creates an adapter for a {@link arduino.Distancia_Infra_Vermelhos}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDistancia_Infra_VermelhosAdapter()
  {
    if (distancia_Infra_VermelhosItemProvider == null)
    {
      distancia_Infra_VermelhosItemProvider = new Distancia_Infra_VermelhosItemProvider(this);
    }

    return distancia_Infra_VermelhosItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link arduino.Inicio} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected InicioItemProvider inicioItemProvider;

  /**
   * This creates an adapter for a {@link arduino.Inicio}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createInicioAdapter()
  {
    if (inicioItemProvider == null)
    {
      inicioItemProvider = new InicioItemProvider(this);
    }

    return inicioItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link arduino.Fim} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FimItemProvider fimItemProvider;

  /**
   * This creates an adapter for a {@link arduino.Fim}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createFimAdapter()
  {
    if (fimItemProvider == null)
    {
      fimItemProvider = new FimItemProvider(this);
    }

    return fimItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link arduino.Parar} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PararItemProvider pararItemProvider;

  /**
   * This creates an adapter for a {@link arduino.Parar}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPararAdapter()
  {
    if (pararItemProvider == null)
    {
      pararItemProvider = new PararItemProvider(this);
    }

    return pararItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link arduino.Parar_Tempo} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Parar_TempoItemProvider parar_TempoItemProvider;

  /**
   * This creates an adapter for a {@link arduino.Parar_Tempo}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createParar_TempoAdapter()
  {
    if (parar_TempoItemProvider == null)
    {
      parar_TempoItemProvider = new Parar_TempoItemProvider(this);
    }

    return parar_TempoItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type)
  {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type)
  {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type)
  {
    if (isFactoryForType(type))
    {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
      {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification)
  {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null)
    {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void dispose()
  {
    if (roboItemProvider != null) roboItemProvider.dispose();
    if (transicoesItemProvider != null) transicoesItemProvider.dispose();
    if (virar_EsquerdaItemProvider != null) virar_EsquerdaItemProvider.dispose();
    if (mover_FrenteItemProvider != null) mover_FrenteItemProvider.dispose();
    if (mover_TrasItemProvider != null) mover_TrasItemProvider.dispose();
    if (virar_DireitaItemProvider != null) virar_DireitaItemProvider.dispose();
    if (rodar_Esquerda_TempoItemProvider != null) rodar_Esquerda_TempoItemProvider.dispose();
    if (rodar_Direita_TempoItemProvider != null) rodar_Direita_TempoItemProvider.dispose();
    if (mover_Frente_TempoItemProvider != null) mover_Frente_TempoItemProvider.dispose();
    if (mover_Tras_TempoItemProvider != null) mover_Tras_TempoItemProvider.dispose();
    if (virar_para_X_GrausItemProvider != null) virar_para_X_GrausItemProvider.dispose();
    if (virar_Max_DrtItemProvider != null) virar_Max_DrtItemProvider.dispose();
    if (virar_Max_EsqItemProvider != null) virar_Max_EsqItemProvider.dispose();
    if (centrarItemProvider != null) centrarItemProvider.dispose();
    if (virar_45_EsqItemProvider != null) virar_45_EsqItemProvider.dispose();
    if (virar_45_DrtItemProvider != null) virar_45_DrtItemProvider.dispose();
    if (mover_AleatoriamenteItemProvider != null) mover_AleatoriamenteItemProvider.dispose();
    if (ligar_LED_VerdeItemProvider != null) ligar_LED_VerdeItemProvider.dispose();
    if (desligar_LED_VerdeItemProvider != null) desligar_LED_VerdeItemProvider.dispose();
    if (ligar_IntermitenciaItemProvider != null) ligar_IntermitenciaItemProvider.dispose();
    if (desligar_IntermitenciaItemProvider != null) desligar_IntermitenciaItemProvider.dispose();
    if (ligar_Cores_PoliciaItemProvider != null) ligar_Cores_PoliciaItemProvider.dispose();
    if (ligar_Cores_Arco_IrisItemProvider != null) ligar_Cores_Arco_IrisItemProvider.dispose();
    if (ligar_AzulItemProvider != null) ligar_AzulItemProvider.dispose();
    if (ligar_VerdeItemProvider != null) ligar_VerdeItemProvider.dispose();
    if (ligar_VermelhoItemProvider != null) ligar_VermelhoItemProvider.dispose();
    if (desligar_CorItemProvider != null) desligar_CorItemProvider.dispose();
    if (desligar_CoresItemProvider != null) desligar_CoresItemProvider.dispose();
    if (whileItemProvider != null) whileItemProvider.dispose();
    if (ifItemProvider != null) ifItemProvider.dispose();
    if (bumper_PressionadoItemProvider != null) bumper_PressionadoItemProvider.dispose();
    if (distancia_Infra_VermelhosItemProvider != null) distancia_Infra_VermelhosItemProvider.dispose();
    if (inicioItemProvider != null) inicioItemProvider.dispose();
    if (fimItemProvider != null) fimItemProvider.dispose();
    if (pararItemProvider != null) pararItemProvider.dispose();
    if (parar_TempoItemProvider != null) parar_TempoItemProvider.dispose();
  }

}
